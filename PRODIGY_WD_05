<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WeatherScope - Modern Weather App</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap');
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Poppins', sans-serif;
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 50%, #1e3c72 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            overflow-x: hidden;
        }
        
        .container {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            padding: 20px;
            width: 380px;
            max-width: 95%;
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.2);
            transition: all 0.3s ease;
            animation: fadeIn 0.8s ease;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(30px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .container:hover {
            transform: translateY(-5px);
            box-shadow: 0 35px 70px rgba(0, 0, 0, 0.3);
        }
        
        .header {
            text-align: center;
            margin-bottom: 15px;
        }
        
        .header h1 {
            font-size: 2rem;
            font-weight: 600;
            margin-bottom: 5px;
            background: linear-gradient(45deg, #fff, #a8edea);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }
        
        .header p {
            opacity: 0.8;
            font-weight: 300;
            font-size: 0.9rem;
        }
        
        .search-container {
            position: relative;
            margin-bottom: 15px;
        }
        
        .search-box {
            width: 100%;
            padding: 12px 45px 12px 18px;
            border: none;
            border-radius: 25px;
            background: rgba(255, 255, 255, 0.2);
            color: white;
            font-size: 15px;
            outline: none;
            transition: all 0.3s ease;
            backdrop-filter: blur(5px);
        }
        
        .search-box::placeholder {
            color: rgba(255, 255, 255, 0.7);
        }
        
        .search-box:focus {
            background: rgba(255, 255, 255, 0.3);
            box-shadow: 0 0 20px rgba(255, 255, 255, 0.2);
        }
        
        .search-btn {
            position: absolute;
            right: 5px;
            top: 50%;
            transform: translateY(-50%);
            background: linear-gradient(45deg, #667eea, #764ba2);
            border: none;
            border-radius: 20px;
            padding: 10px 15px;
            color: white;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .search-btn:hover {
            transform: translateY(-50%) scale(1.1);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }
        
        .location-btn {
            width: 100%;
            background: linear-gradient(45deg, #764ba2, #667eea);
            border: none;
            border-radius: 25px;
            padding: 10px;
            color: white;
            font-size: 15px;
            cursor: pointer;
            margin-bottom: 15px;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }
        
        .location-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
        }
        
        .location-btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: left 0.5s ease;
        }
        
        .location-btn:hover::before {
            left: 100%;
        }
        
        .weather-card {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            padding: 15px;
            text-align: center;
            backdrop-filter: blur(5px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            transition: all 0.3s ease;
            opacity: 0;
            transform: translateY(30px);
        }
        
        .weather-card.show {
            opacity: 1;
            transform: translateY(0);
        }
        
        .city-name {
            font-size: 1.6rem;
            font-weight: 600;
            margin-bottom: 8px;
        }
        
        .weather-icon {
            font-size: 3rem;
            margin: 10px 0;
            animation: bounce 2s infinite;
        }
        
        @keyframes bounce {
            0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
            40% { transform: translateY(-10px); }
            60% { transform: translateY(-5px); }
        }
        
        .temperature {
            font-size: 2.5rem;
            font-weight: 700;
            margin: 8px 0;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
        }
        
        .description {
            font-size: 1.1rem;
            opacity: 0.9;
            text-transform: capitalize;
            margin-bottom: 15px;
        }
        
        .weather-details {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 12px;
            margin-top: 15px;
        }
        
        .detail-item {
            background: rgba(255, 255, 255, 0.1);
            padding: 12px;
            border-radius: 10px;
            transition: all 0.3s ease;
        }
        
        .detail-item:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: translateY(-3px);
        }
        
        .detail-icon {
            font-size: 1.5rem;
            margin-bottom: 8px;
        }
        
        .detail-value {
            font-size: 1.1rem;
            font-weight: 600;
        }
        
        .detail-label {
            font-size: 0.9rem;
            opacity: 0.8;
        }
        
        .error-message {
            background: rgba(255, 99, 99, 0.3);
            border: 1px solid rgba(255, 99, 99, 0.5);
            color: #ffcccc;
            padding: 15px;
            border-radius: 10px;
            text-align: center;
            margin-top: 20px;
        }
        
        .loading {
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 40px;
        }
        
        .loading-spinner {
            width: 40px;
            height: 40px;
            border: 4px solid rgba(255, 255, 255, 0.3);
            border-top: 4px solid white;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .current-time {
            text-align: center;
            margin-top: 12px;
            opacity: 0.8;
            font-size: 0.8rem;
        }
        
        @media (max-width: 480px) {
            .container {
                padding: 30px 20px;
            }
            
            .header h1 {
                font-size: 2rem;
            }
            
            .temperature {
                font-size: 2.5rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üå§Ô∏è WeatherScope</h1>
            <p>Your personal weather companion</p>
        </div>
        
        <div class="search-container">
            <input type="text" id="cityInput" class="search-box" placeholder="Enter city name..." />
            <button class="search-btn" onclick="getWeatherByCity()">üîç</button>
        </div>
        
        <button class="location-btn" onclick="getWeatherByLocation()">
            üìç Use My Current Location
        </button>
        
        <div id="weather"></div>
        
        <div class="current-time" id="currentTime"></div>
    </div>

    <script>
        const apiKey = "79a2eec03e4a3fc854a5d79b510aa913"; // Replace with your actual API key
        
        // Update current time
        function updateTime() {
            const now = new Date();
            const timeString = now.toLocaleString('en-US', {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
            document.getElementById('currentTime').textContent = timeString;
        }
        
        // Update time immediately and then every minute
        updateTime();
        setInterval(updateTime, 60000);
        
        // Weather icon mapping
        const weatherIcons = {
            'Clear': '‚òÄÔ∏è',
            'Clouds': '‚òÅÔ∏è',
            'Rain': 'üåßÔ∏è',
            'Drizzle': 'üå¶Ô∏è',
            'Thunderstorm': '‚õàÔ∏è',
            'Snow': '‚ùÑÔ∏è',
            'Mist': 'üå´Ô∏è',
            'Fog': 'üå´Ô∏è'
        };
        
        function displayWeather(data) {
            const weatherDiv = document.getElementById("weather");
            
            if (data.cod !== 200) {
                weatherDiv.innerHTML = `
                    <div class="error-message">
                        <h3>Oops! Something went wrong</h3>
                        <p>${data.message}</p>
                        <p>Please check the city name and try again.</p>
                    </div>
                `;
                return;
            }
            
            const weatherIcon = weatherIcons[data.weather[0].main] || 'üå§Ô∏è';
            const sunrise = new Date(data.sys.sunrise * 1000).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' });
            const sunset = new Date(data.sys.sunset * 1000).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' });
            
            weatherDiv.innerHTML = `
                <div class="weather-card">
                    <div class="city-name">${data.name}, ${data.sys.country}</div>
                    <div class="weather-icon">${weatherIcon}</div>
                    <div class="temperature">${Math.round(data.main.temp)}¬∞C</div>
                    <div class="description">${data.weather[0].description}</div>
                    
                    <div class="weather-details">
                        <div class="detail-item">
                            <div class="detail-icon">üíß</div>
                            <div class="detail-value">${data.main.humidity}%</div>
                            <div class="detail-label">Humidity</div>
                        </div>
                        <div class="detail-item">
                            <div class="detail-icon">üå¨Ô∏è</div>
                            <div class="detail-value">${data.wind.speed} m/s</div>
                            <div class="detail-label">Wind Speed</div>
                        </div>
                    </div>
                </div>
            `;
            
            // Add animation to weather card
            setTimeout(() => {
                document.querySelector('.weather-card').classList.add('show');
            }, 100);
        }
        
        function showLoading() {
            const weatherDiv = document.getElementById("weather");
            weatherDiv.innerHTML = `
                <div class="loading">
                    <div class="loading-spinner"></div>
                </div>
            `;
        }
        
        async function getWeatherByCity() {
            const city = document.getElementById("cityInput").value.trim();
            if (!city) {
                alert("Please enter a city name");
                return;
            }
            
            showLoading();
            
            try {
                const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${apiKey}`);
                const data = await response.json();
                displayWeather(data);
            } catch (error) {
                console.error("Error fetching weather data:", error);
                document.getElementById("weather").innerHTML = `
                    <div class="error-message">
                        <h3>Network Error</h3>
                        <p>Unable to fetch weather data. Please check your internet connection.</p>
                    </div>
                `;
            }
        }
        
        async function getWeatherByLocation() {
            if (!navigator.geolocation) {
                alert("Geolocation is not supported by this browser.");
                return;
            }
            
            showLoading();
            
            navigator.geolocation.getCurrentPosition(
                async (position) => {
                    const lat = position.coords.latitude;
                    const lon = position.coords.longitude;
                    
                    try {
                        const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&appid=${apiKey}`);
                        const data = await response.json();
                        displayWeather(data);
                    } catch (error) {
                        console.error("Error fetching weather data:", error);
                        document.getElementById("weather").innerHTML = `
                            <div class="error-message">
                                <h3>Network Error</h3>
                                <p>Unable to fetch weather data. Please check your internet connection.</p>
                            </div>
                        `;
                    }
                },
                (error) => {
                    console.error("Geolocation error:", error);
                    document.getElementById("weather").innerHTML = `
                        <div class="error-message">
                            <h3>Location Access Denied</h3>
                            <p>Please allow location access or enter a city name manually.</p>
                        </div>
                    `;
                }
            );
        }
        
        // Allow Enter key to search
        document.getElementById("cityInput").addEventListener("keypress", function(event) {
            if (event.key === "Enter") {
                getWeatherByCity();
            }
        });
        
        // Auto-focus search input
        document.getElementById("cityInput").focus();
    </script>
</body>
</html>
